name: dbt checks

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: pip install uv

      - name: Sync dependencies
        run: uv sync --extra dev

      - name: Configure dbt environment variables
        run: |
          echo "DBT_PROFILES_DIR=$RUNNER_TEMP/dbt-profiles" >> "$GITHUB_ENV"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/bq-key.json" >> "$GITHUB_ENV"

      - name: Prepare dbt profile and credentials
        env:
          BQ_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.BQ_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          set -euo pipefail

          mkdir -p "$DBT_PROFILES_DIR"
          mkdir -p "$(dirname "$GOOGLE_APPLICATION_CREDENTIALS")"

          cat <<PROFILE > "$DBT_PROFILES_DIR/profiles.yml"
          dbt_buckets:
            target: ci
            outputs:
              ci:
                type: bigquery
                method: service-account
                keyfile: "$GOOGLE_APPLICATION_CREDENTIALS"
                project: bigquery-sandbox-cpvuft6h
                dataset: tmp
                location: EU
                threads: 1
          PROFILE
          if [ -z "${BQ_SERVICE_ACCOUNT_JSON_BASE64:-}" ]; then
            echo "BQ_SERVICE_ACCOUNT_JSON_BASE64 secret is empty" >&2
            exit 1
          fi

          echo "Loaded service account key (base64) length: ${#BQ_SERVICE_ACCOUNT_JSON_BASE64}"
          printf '%s' "$BQ_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > "$GOOGLE_APPLICATION_CREDENTIALS"
          echo "Rendered dbt profile (for debugging):"
          cat "$DBT_PROFILES_DIR/profiles.yml"
          echo "Service account key bytes: $(wc -c < "$GOOGLE_APPLICATION_CREDENTIALS")"

      - name: dbt deps
        run: uv run --extra dev dbt deps

      - name: dbt compile
        run: uv run --extra dev dbt compile

      - name: dbt unit tests
        run: uv run --extra dev ./scripts/run_unit_tests.sh

  docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'nektos/act'
    needs: checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: pip install uv

      - name: Sync dependencies
        run: uv sync --extra dev

      - name: Configure dbt environment variables
        run: |
          echo "DBT_PROFILES_DIR=$RUNNER_TEMP/dbt-profiles" >> "$GITHUB_ENV"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/bq-key.json" >> "$GITHUB_ENV"

      - name: Prepare dbt profile and credentials
        env:
          BQ_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.BQ_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          set -euo pipefail

          mkdir -p "$DBT_PROFILES_DIR"
          mkdir -p "$(dirname "$GOOGLE_APPLICATION_CREDENTIALS")"

          cat <<PROFILE > "$DBT_PROFILES_DIR/profiles.yml"
          dbt_buckets:
            target: ci
            outputs:
              ci:
                type: bigquery
                method: service-account
                keyfile: "$GOOGLE_APPLICATION_CREDENTIALS"
                project: bigquery-sandbox-cpvuft6h
                dataset: tmp
                location: EU
                threads: 1
          PROFILE
          if [ -z "${BQ_SERVICE_ACCOUNT_JSON_BASE64:-}" ]; then
            echo "BQ_SERVICE_ACCOUNT_JSON_BASE64 secret is empty" >&2
            exit 1
          fi

          printf '%s' "$BQ_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: Generate docs
        run: |
          uv run --extra dev dbt deps
          uv run --extra dev dbt docs generate

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target

  deploy-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'nektos/act'
    needs: docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  tag-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'nektos/act'
    needs: docs
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git user
        env:
          GIT_ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          NAME="${GIT_ACTOR:-github-actions[bot]}"
          EMAIL="${NAME}@users.noreply.github.com"
          git config user.name "$NAME"
          gitconfigSignature="$EMAIL"
      - name: Extract project version
        id: version
        run: |
          set -euo pipefail
          VERSION=$(grep -E '^version:' dbt_project.yml | head -n 1 | awk '{print $2}' | tr -d '"')
          if [ -z "$VERSION" ]; then
            echo "Could not find version in dbt_project.yml" >&2
            exit 1
          fi
          TAG="v${VERSION}"
          LAST_TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 1)
          if [ -n "$LAST_TAG" ]; then
            if [ "$TAG" = "$LAST_TAG" ]; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
              echo "Tag $TAG already exists; skipping."
              exit 0
            fi
            if [ "$(printf '%s\n%s\n' "${LAST_TAG#v}" "$VERSION" | sort -V | tail -n1)" != "$VERSION" ]; then
              echo "Detected version $VERSION is not greater than latest tag ${LAST_TAG#v}" >&2
              exit 1
            fi
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "Project version: $TAG"

      - name: Create and push tag
        if: steps.version.outputs.skip != 'true'
        env:
          TAG: ${{ steps.version.outputs.tag }}
        run: |
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
